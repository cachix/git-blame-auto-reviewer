import * as core from "@actions/core";
import * as github from "@actions/github";
import type { GitHub } from "@actions/github/lib/utils";

type Octokit = InstanceType<typeof GitHub>;

export async function getChangedFiles(
  octokit: Octokit,
  context: typeof github.context,
): Promise<Array<{ filename: string; status: string }>> {
  const { owner, repo } = context.repo;
  const pullNumber = context.payload.pull_request?.number;

  if (!pullNumber) {
    throw new Error("No pull request number found in context");
  }

  const { data: files } = await octokit.rest.pulls.listFiles({
    owner,
    repo,
    pull_number: pullNumber,
    per_page: 100,
  });

  // Filter out removed files
  return files.filter((file) => file.status !== "removed");
}

export async function resolveCommitAuthor(
  octokit: Octokit,
  context: typeof github.context,
  commitSha: string,
): Promise<string | null> {
  try {
    const { owner, repo } = context.repo;

    const { data: commitData } = await octokit.rest.repos.getCommit({
      owner,
      repo,
      ref: commitSha,
    });

    // Check if GitHub has associated this commit with a user
    if (commitData.author?.login) {
      return commitData.author.login;
    }

    // Fallback to committer if author is not available
    if (commitData.committer?.login) {
      return commitData.committer.login;
    }

    core.debug(`No GitHub user found for commit ${commitSha}`);
    return null;
  } catch (error) {
    core.debug(`Failed to resolve commit ${commitSha}: ${error}`);
    return null;
  }
}

async function findExistingComment(
  octokit: Octokit,
  context: typeof github.context,
): Promise<number | null> {
  const { owner, repo } = context.repo;
  const pullNumber = context.payload.pull_request?.number;

  if (!pullNumber) {
    throw new Error("No pull request number found in context");
  }

  const COMMENT_IDENTIFIER = "<!-- git-blame-auto-reviewer -->";

  try {
    const { data: comments } = await octokit.rest.issues.listComments({
      owner,
      repo,
      issue_number: pullNumber,
      per_page: 100,
    });

    const existingComment = comments.find(comment => 
      comment.body?.includes(COMMENT_IDENTIFIER)
    );

    return existingComment?.id || null;
  } catch (error) {
    core.debug(`Failed to list comments: ${error}`);
    return null;
  }
}

export async function createReviewComment(
  octokit: Octokit,
  context: typeof github.context,
  reviewers: Array<{ username: string; percentage: number; linesChanged: number }>,
): Promise<void> {
  const { owner, repo } = context.repo;
  const pullNumber = context.payload.pull_request?.number;

  if (!pullNumber) {
    throw new Error("No pull request number found in context");
  }

  // Build the comment body
  const COMMENT_IDENTIFIER = "<!-- git-blame-auto-reviewer -->";
  let commentBody = `${COMMENT_IDENTIFIER}\n## üîç Suggested Reviewers\n\n`;
  commentBody += "Based on git blame analysis of the changed lines, the following contributors have significant experience with the modified code:\n\n";
  
  reviewers.forEach((reviewer) => {
    commentBody += `- **@${reviewer.username}** - ${reviewer.percentage.toFixed(1)}% of changed lines (${reviewer.linesChanged} lines)\n`;
  });
  
  commentBody += "\n";
  commentBody += "Please consider reviewing this PR as you have authored significant portions of the code being modified. Your expertise would be valuable! üôè\n\n";
  commentBody += "*This comment was automatically generated by [git-blame-auto-reviewer](https://github.com/marketplace/actions/git-blame-auto-reviewer)*\n\n";
  commentBody += `*Last updated: ${new Date().toISOString()}*`;

  try {
    // Check for existing comment
    const existingCommentId = await findExistingComment(octokit, context);

    if (existingCommentId) {
      // Update existing comment
      await octokit.rest.issues.updateComment({
        owner,
        repo,
        comment_id: existingCommentId,
        body: commentBody,
      });

      core.info(
        `‚úÖ Successfully updated existing review suggestion comment with ${reviewers.length} suggested reviewers`,
      );
    } else {
      // Create new comment
      await octokit.rest.issues.createComment({
        owner,
        repo,
        issue_number: pullNumber,
        body: commentBody,
      });

      core.info(
        `‚úÖ Successfully posted review suggestion comment with ${reviewers.length} suggested reviewers`,
      );
    }
  } catch (error: any) {
    throw new Error(`Failed to create/update comment: ${error.message}`);
  }
}
